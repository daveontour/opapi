package repo

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"time"

	"github.com/daveontour/opapi/opapi/globals"
	"github.com/daveontour/opapi/opapi/models"

	"github.com/spf13/viper"
)

type AutoGenerated struct {
	TestConfig struct {
		Repository   models.Repository `json:"Repository"`
		CheckinAreas []struct {
			Area   string `json:"Area"`
			Number int    `json:"Number"`
		} `json:"CheckinAreas"`
		GateAreas []struct {
			Area   string `json:"Area"`
			Number int    `json:"Number"`
		} `json:"GateAreas"`
		StandAreas []struct {
			Area   string `json:"Area"`
			Number int    `json:"Number"`
		} `json:"StandAreas"`
		CarouselAreas []struct {
			Area   string `json:"Area"`
			Number int    `json:"Number"`
		} `json:"CarouselAreas"`
		ChuteAreas []struct {
			Area   string `json:"Area"`
			Number int    `json:"Number"`
		} `json:"ChuteAreas"`
		Airlines []string `json:"Airlines"`
		Routes   []string `json:"Routes"`
	} `json:"TestConfig"`
}

var testInit = false

func PerfTestInit() {

	if testInit {
		fmt.Println("Test Repo has already been initialised")
		return
	}
	testInit = true
	exe, err0 := os.Executable()
	if err0 != nil {
		panic(err0)
	}
	exPath := filepath.Dir(exe)
	testViper := viper.New()

	testViper.SetConfigName("test")        // name of config file (without extension)
	testViper.SetConfigType("json")        // REQUIRED if the config file does not have the extension in the name
	testViper.AddConfigPath("./testfiles") // optionally look for config in the working directory
	testViper.AddConfigPath(exPath)
	if err := testViper.ReadInConfig(); err != nil {
		globals.Logger.Fatal("Could Not Read test.json config file")
	}

	var config = AutoGenerated{}
	if err := testViper.Unmarshal(&config); err != nil {
		fmt.Println("Error reading test config file")
		return
	}

	globals.RepoList = append(globals.RepoList, config.TestConfig.Repository)

	rep := GetRepo(config.TestConfig.Repository.AMSAirport)

	for _, ci := range config.TestConfig.CheckinAreas {
		addResource(ci.Area, ci.Number, "CheckIn", &rep.CheckInList)
	}
	for _, ci := range config.TestConfig.GateAreas {
		addResource(ci.Area, ci.Number, "Gate", &rep.GateList)
	}
	for _, ci := range config.TestConfig.StandAreas {
		addResource(ci.Area, ci.Number, "Stand", &rep.StandList)
	}
	for _, ci := range config.TestConfig.CarouselAreas {
		addResource(ci.Area, ci.Number, "Carousel", &rep.CarouselList)
	}
	for _, ci := range config.TestConfig.ChuteAreas {
		addResource(ci.Area, ci.Number, "Chute", &rep.ChuteList)
	}

	// If it's not demo mode then init the repoManager to listen on Rabbit MQ or MSMQ
	if !globals.DemoMode {
		go MaintainRepository(config.TestConfig.Repository.AMSAirport, true)
		time.Sleep(time.Duration(1 * time.Second))
	}

	(*rep).CurrentLowerLimit = time.Now().Add(-60 * 24 * 15 * time.Minute)
	(*rep).CurrentUpperLimit = time.Now().Add(60 * 24 * 15 * time.Minute)

	fmt.Println("Demo Resources Loaded. Ready to process requests via HTTP RestAPI")

}

func addResource(area string, num int, rtype string, arr *models.ResourceLinkedList) {

	for i := 1; i <= num; i++ {
		arr.AddNode(
			models.ResourceAllocationStruct{
				Resource: models.FixedResource{
					ResourceTypeCode: rtype,
					Name:             fmt.Sprintf("%s%d", area, i),
					Area:             area,
				},
			},
		)
	}

}

func failOnError(err error, msg string) {
	if err != nil {
		log.Panicf("%s: %s", msg, err)
	}
}
